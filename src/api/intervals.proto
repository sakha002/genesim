syntax = "proto3";
package genesys;


import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";



message BaseInterval {
  // Duration could be optional; if we group a list of same duration intervals; then we could mark with one field (interval_end)
  // if we have a group of intervals we probably won't use both begin and end to mark them; still we place it here. 
  // int32 id =  1;
  // string name = 2;
  google.protobuf.Duration duration = 4;
  google.protobuf.Timestamp interval_end = 3;
  // google.protobuf.Timestamp interval_begin = 5;
}

message Interval{
  // okay so my goal is to have this span somewhat comprehensive, so that it would be used often
  // for an asset telemetry or market product or 
  // probably always a subset of features would be empty/unused.
  // support a few different ways to define/reference to a time-span.
  int32 id = 1;
  string name = 2;
  google.protobuf.Duration duration = 4;
  google.protobuf.Timestamp interval_end = 3;
  google.protobuf.Timestamp interval_begin = 5;
  BaseInterval base_interval = 10; // this is used when defining a long time span that we wish to break in smaller resolution; e.g. simulation-horizon
}

message IntervalGroup{
  //  should be sought if it is needed or covered by horizon
  int32 id =  1;
  string name = 2;
  google.protobuf.Duration duration = 4; // for same duration intervals 
  repeated Interval intervals = 3;
  repeated BaseInterval base_intervals = 6; // this won't be provided by the user mostly; should we still keept it here?
}

// message Horizon{
//   // this is to define a group of BaseIntervals or Spans 
//   // also can be used to link one group to another 
//   int32 id = 1;
//   string name = 2;
//   repeated Interval intervals = 5;
//   repeated BaseInterval base_intervals = 6;
//   BaseIntervalGroup interval_group = 7;
//   repeated int32 interval_ids = 10;
// }

message Quantity{
  int32 id = 1;
  string name = 2;
  string unit = 5;
  double value = 6;
  Interval interval = 10;
}

message QuantityGroup {
  int32 id = 1;
  string name = 2;
  string unit = 5;
  repeated Quantity quantitys = 10;
}

message IntervalQuantity{
  int32 id = 1;
  string name = 2;
  Interval interval = 6;
  BasicQuantity quantity = 7;
}
// okay so basically  here we allow a very loose defenition for the interval format(
// it can be two stamps,  one stamp&a duration, 
// (the base intervals will be mostly for internal mapping, maybe even not good to have it in intf)
//  well the need to have a BaseInterval which is the model resolution, is kind of affecting the defenitions
//  the Interval and BaseInterval are the same thing.

message BasicQuantity{
  int32 id = 1;
  string name = 2;
  string unit = 5;
  double value = 10;
}

message BasicQuantityGroup{
  int32 id = 1;
  string name = 2;
  string unit = 5;
  repeated BasicQuantity quantitys = 10;
}

message IntervalQuantityGroup{
  int32 id = 1;
  string name = 2;
  string unit = 5;
  repeated IntervalQuantity interval_quantitys = 10;
}

// shoud change the unit type to enum