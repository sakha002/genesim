syntax = "proto3";
package genesim_api;


import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";



message BaseInterval {
  // Duration could be optional; if we group a list of same duration intervals; then we could mark with one field (interval_end)
  // if we have a group of intervals we probably won't use both begin and end to mark them; still we place it here. 
  int32 id =  1;
  string name = 2;

  google.protobuf.Duration duration = 4;
  google.protobuf.Timestamp interval_end = 3;
  google.protobuf.Timestamp interval_begin = 5;
}

message BaseIntervalGroup{
  int32 id =  1;
  string name = 2;
  google.protobuf.Duration duration = 4;
  repeated BaseInterval base_intervals = 3;

}

message Interval{
  // okay so my goal is to have this span somewhat comprehensive, so that it would be used often
  // for an asset telemetry or market product or 
  // probably always a subset of features would be empty/unused.
  // support a few different ways to define/reference to a time-span.
  int32 id = 1;
  string name = 2;

  google.protobuf.Duration duration = 4;
  google.protobuf.Timestamp interval_end = 3;
  google.protobuf.Timestamp interval_begin = 5;

  repeated BaseInterval base_intervals = 10;
  int32 base_interval_group_id = 11;
  BaseIntervalGroup base_interval_group = 12;
}

// this is probably not needed; included in the horizon
// message SpanGroup{  
//   nt32 id = 1;
//   string name = 2;
//   repeated Span spans = 3;
// }

// this is probably not needed; included in the horizon
// message HorizonIntervals{
//   // this is to link a group of base intervals to a group of spans; not sure if this is actually needed/useful.
//   int32 id = 1;
//   string name = 2;
//   repeated BaseInterval base_intervals = 3;
//   repeated int32 span_ids = 4;
// }

message Horizon{
  // this is to define a group of BaseIntervals or Spans 
  // also can be used to link one group to another 
  int32 id = 1;
  string name = 2;
  repeated Interval intervals = 5;
  repeated BaseInterval base_intervals = 6;
  BaseIntervalGroup interval_group = 7;
  repeated int32 interval_ids = 10;
}


message Quantity{
  int32 id = 1;
  string name = 2;

  string unit = 5;
  double value = 6;
  Interval interval = 10;
}



message IntervalQuantity{
  int32 id = 1;
  string name = 2;

  Interval interval = 6;
  BasicQuantity quantity = 7;
}
// okay so basically  here we allow a very loose defenition for the interval format(
// it can be two stamps,  one stamp&a duration, 
// (the base intervals will be mostly for internal mapping, maybe even not good to have it in intf)
//  well the need to have a BaseInterval which is the model resolution, is kind of affecting the defenitions
//  the Interval and BaseInterval are the same thing.


message BasicQuantity{
  int32 id = 1;
  string name = 2;

  string unit = 5;
  double value = 10;
}


message IntervalQuantityGroup{
  int32 id = 1;
  string name = 2;

  string unit = 5;
  repeated IntervalQuantity interval_values = 10;
}

// shoud change the unit type to enum